volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}
  production_django_media: {}
  
  production_redis_data: {}
  


services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile

    image: savollar_production_django
    volumes:
      - production_django_media:/app/apps/media
    depends_on:
      django-migrate:
        condition: service_completed_successfully
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start
    restart: unless-stopped
    ports:
      - "8020:5000"
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: savollar_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: docker.io/redis:6
    volumes:
      - production_redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  django-migrate:
    <<: *django
    image: savollar_production_django_migrate
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput --clear"
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    ports: []

  celeryworker:
    <<: *django
    image: savollar_production_celeryworker
    command: /start-celeryworker
    depends_on:
      django-migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    ports: []

  celerybeat:
    <<: *django
    image: savollar_production_celerybeat
    command: /start-celerybeat
    depends_on:
      django-migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    ports: []

  flower:
    <<: *django
    image: savollar_production_flower
    command: /start-flower
    depends_on:
      django-migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    ports:
      - "5555:5555"

  nginx:
    build:
      context: .
      dockerfile: ./compose/production/nginx/Dockerfile
    image: savollar_production_nginx
    depends_on:
      django:
        condition: service_started
    volumes:
      - production_django_media:/usr/share/nginx/media:ro
    ports:
      - '8080:80'
      - '8443:443'
    restart: unless-stopped
